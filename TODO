- need a way to insert function argument names into the function type for func definition?
	- no, not for typing. only for emitLambda, which can do it's own thing

- to compile:
	(let ((x (- 1 2))) ... )
	we need to:
	- work out the type of (- 1 2), a list
		- which involves having an emvironment of identifier -> type to give us a type for -
		- then assuming that we have function application
			- error if '-' does not have Func type
			- (optional? error if list does not match func args)
			- type of (- 1 2) is then return type of func
	- so node.Type() depends on a type environment. Goes as arg?

- need a way to get the typ.Type of a node
	- which can start with simple rules but needs to scale to an inference engine
	- add Type() typ.Type to node interface and call it
	- define for the types we can (primitives, progn, func, builtins)
	- define panic() placeholders for others
	- see how far we get before needing inference engine

- change compile to use the typ.Type instead of int64 when emitting golang code

- get (let ((- +)) ...) to pass by embedding the typ.Type of builtins as part of their definition


















DONE - change emit to return strings
	- since we need to interpolate in different places

- variable scope
	- either use nested lambdas everywhere
		- including progn, nodelambda
	- or carry an idea of what is in scope around
		- and pass it through any generated calls

- lambda/let
	- write one in terms of the other

- types:
	- start with everythings an int64
	- don't use dynamic types in the compiled output, use static
		- interface{} where needed (e.g. display)t :e g
	- add type context
	- generate errors

DONE - refactor:
	- all AST types in one place

DONE - add position information to all errors

- pull out parseFile/parseReader and call from eval and golang

- make backend pluggable
	- consumes AST
		- go?
		- llvm?
		- asm?
		- perl?
		- scheme?

- macro system
	- re-implement some special forms as macros?

- add 'eval' and 'apply' builtins
	(eval '(+ 1 2)) => 3

- start with basic chibi tests
	- build simple static HTML report on test coverage

- poss get mzscheme basic tests? (if we want immutability)

- variable bindings
	DONE - define
		- top level?
	DONE - syntactic sugar for functions
	- internal define?
		- what are the rules for scheme?

- handle parsing errors (e.g. #a as a bool)

- internal define

- eval

- fix/test mutability in closures

- seperate tests to _test files
	- write repl
	- write cmdline tool
	- add some multi-line test cases (define funcs etc)
	- y combinator!
	- church numerals

- better numerics
	- golang types?
	- scheme numeric tower?

- reorg code
	- types + methods all in their own file

- pretty-print ast

- call into go code?
	- reserve '.' anywhere in identifier
	(.println "hello, world")
	(fmt.Printf "hello, world\n")
	- done by writing out golang src!?
		- instead of eval

- have decorate set up NodeError
	- e.g. decorateLet
	- reference the original node
	- which can in turn reference file, line and column

- add real test cases as xxx_test
	- explore go tap?

- test failed let decorate
	- check file/line/pos info

- add progn special form
	- implicit progn in let
		- so add one in decorate if needed

- work out what an applicable is so we can define addInt (maybe generic addNum?)

- add lambda to define our own applicables

- add some i/o applicable primitives


--------------------------------

DONE - add let special form


DONE - add int type so we can write simple test cases

DONE - add -ve integers and tests

DONE - work out where we should eval let binding bodies
	- needs to be eval-time so outer bindings work:
		(let ((+ *))
			(let ((x (+ 1 2)))
				x))

DONE - add '+' in default env
	- add NodeApplicable
	- no type info (or arity)
	- just helper funcs

DONE - lambda
	- has to carry env with it for eval
		- eval in env at the time
		- (let ((a 1))
			(let ((f (lambda (x) (+ a x))))
				(let ((a 2))
					(f 3))))

DONE - check application to redex
	- (+ (+ 1 2) (+ 2 3))
	- (let ((f (lambda (x) (+ 1 x))))
		(f (+ 1 2)))

DONE - progn

DONE - add implicit progn to let+lambda

